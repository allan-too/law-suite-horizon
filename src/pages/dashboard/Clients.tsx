
import React, { useState } from 'react';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { useLocation } from 'react-router-dom';
import {
  LayoutDashboard,
  Users,
  FileText,
  CreditCard,
  Settings,
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ClientForm } from '@/components/forms/ClientForm';
import { ClientCard } from '@/components/cards/ClientCard';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

interface Client {
  id: string;
  name: string;
  email: string;
  phone: string;
  address: string;
  jurisdiction: string;
  issueDescription: string;
  status: 'New' | 'Done' | 'VIP';
}

const Clients: React.FC = () => {
  const location = useLocation();
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingClient, setEditingClient] = useState<Client | undefined>();
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [clientToDelete, setClientToDelete] = useState<string | null>(null);

  // Navigation items for the sidebar
  const sidebarItems = [
    { 
      title: 'Dashboard', 
      icon: LayoutDashboard, 
      href: '/dashboard',
      active: location.pathname === '/dashboard',
    },
    { 
      title: 'Clients', 
      icon: Users, 
      href: '/dashboard/clients',
      active: location.pathname === '/dashboard/clients',
    },
    { 
      title: 'Intake Forms', 
      icon: FileText, 
      href: '/dashboard/intake-forms',
      active: location.pathname === '/dashboard/intake-forms',
    },
    { 
      title: 'Documents', 
      icon: FileText, 
      href: '/dashboard/documents',
      active: location.pathname === '/dashboard/documents',
    },
    { 
      title: 'Contracts', 
      icon: FileText, 
      href: '/dashboard/contracts',
      active: location.pathname === '/dashboard/contracts',
    },
    { 
      title: 'Billing', 
      icon: CreditCard, 
      href: '/dashboard/billing',
      active: location.pathname === '/dashboard/billing',
    },
    { 
      title: 'Settings', 
      icon: Settings, 
      href: '/dashboard/settings',
      active: location.pathname === '/dashboard/settings',
    },
  ];

  // Mock client data - in production, this would come from an API
  const [clients, setClients] = useState<Client[]>([
    { 
      id: '1', 
      name: 'John Smith', 
      email: 'john@example.com', 
      phone: '+1-555-0123',
      address: '123 Main St, New York, NY 10001, USA',
      jurisdiction: 'United States',
      issueDescription: 'Contract dispute with former business partner regarding intellectual property rights and profit sharing agreements.',
      status: 'New'
    },
    { 
      id: '2', 
      name: 'Lisa Johnson', 
      email: 'lisa@example.com', 
      phone: '+1-555-0456',
      address: '456 Oak Ave, Toronto, ON M5V 2A8, Canada',
      jurisdiction: 'Canada',
      issueDescription: 'Employment law matter involving wrongful termination and severance package negotiations.',
      status: 'VIP'
    },
    { 
      id: '3', 
      name: 'Michael Brown', 
      email: 'michael@example.com', 
      phone: '+44-20-7946-0958',
      address: '789 High Street, London, SW1A 1AA, United Kingdom',
      jurisdiction: 'United Kingdom',
      issueDescription: 'Real estate transaction for commercial property acquisition with complex zoning requirements.',
      status: 'Done'
    },
  ]);

  const handleAddClient = () => {
    setEditingClient(undefined);
    setIsFormOpen(true);
  };

  const handleEditClient = (client: Client) => {
    setEditingClient(client);
    setIsFormOpen(true);
  };

  const handleDeleteClient = (clientId: string) => {
    setClientToDelete(clientId);
    setDeleteDialogOpen(true);
  };

  const confirmDelete = () => {
    if (clientToDelete) {
      // In production, make API call to delete client
      // await fetch(`/api/clients/${clientToDelete}`, { method: 'DELETE' });
      setClients(prev => prev.filter(client => client.id !== clientToDelete));
      setClientToDelete(null);
      setDeleteDialogOpen(false);
    }
  };

  const handleSubmitClient = (clientData: Client) => {
    if (editingClient) {
      // Update existing client
      setClients(prev => prev.map(client => 
        client.id === editingClient.id ? { ...clientData, id: editingClient.id } : client
      ));
    } else {
      // Add new client
      const newClient = {
        ...clientData,
        id: Date.now().toString(), // In production, this would be generated by the backend
      };
      setClients(prev => [...prev, newClient]);
    }
  };

  return (
    <DashboardLayout 
      sidebarItems={sidebarItems} 
      headerTitle="Client Management"
    >
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold tracking-tight">Clients</h2>
          <Button onClick={handleAddClient}>
            Add New Client
          </Button>
        </div>
        
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {clients.map((client) => (
            <ClientCard
              key={client.id}
              client={client}
              onEdit={handleEditClient}
              onDelete={handleDeleteClient}
            />
          ))}
        </div>

        {clients.length === 0 && (
          <Card>
            <CardContent className="p-8 text-center">
              <p className="text-muted-foreground">No clients yet. Add your first client to get started.</p>
            </CardContent>
          </Card>
        )}
        
        <ClientForm
          open={isFormOpen}
          onOpenChange={setIsFormOpen}
          client={editingClient}
          onSubmit={handleSubmitClient}
        />

        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Delete Client</AlertDialogTitle>
              <AlertDialogDescription>
                Are you sure you want to delete this client? This action cannot be undone and will also remove any associated contracts and documents.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction onClick={confirmDelete}>Delete</AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </DashboardLayout>
  );
};

export default Clients;
